;
; i2s_out is the I2S audio output PIO.
;
;.pio_version 0 // only requires PIO version 0

;.program i2s_out

; Taken from the R Pi hello_pio example.
; Repeatedly get one word of data from the TX FIFO, stalling when the FIFO is
; empty. Write the least significant bit to the OUT pin group.

;loop:
;    pull
;    out pins, 1
;    jmp loop

;% c-sdk {
;static inline void i2s_out_program_init(PIO pio, uint sm, uint offset, uint pin) {
;    pio_sm_config c = i2s_out_program_get_default_config(offset);

;    // Map the state machine's OUT pin group to one pin, namely the `pin`
;    // parameter to this function.
;    sm_config_set_out_pins(&c, pin, 1);
;    // Set this pin's GPIO function (connect PIO to the pad)
;    pio_gpio_init(pio, pin);
;    // Set the pin direction to output at the PIO
;    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
;
;    // Load our configuration, and jump to the start of the program
;    pio_sm_init(pio, sm, offset, &c);
;    // Set the state machine running
;    pio_sm_set_enabled(pio, sm, true);
;}
;%}

;-----------------------------------------------------------------------------------------
;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;
;
; Transmit a mono or stereo I2S audio stream as stereo
; This is 16 bits per sample; can be altered by modifying the "set" params,
; or made programmable by replacing "set x" with "mov x, y" and using Y as a config register.
;
; Autopull must be enabled, with threshold set to 32.
; Since I2S is MSB-first, shift direction should be to left.
; Hence the format of the FIFO word is:
;
; | 31   :   16 | 15   :    0 |
; | sample ws=0 | sample ws=1 |
;
; Data is output at 1 bit per clock. Use clock divider to adjust frequency.
; Fractional divider will probably be needed to get correct bit clock period,
; but for common sysclk freqs this should still give a constant word select period.
;
; One output pin is used for the data output.
; Two side-set pins are used for bit-clock (BCLK) and Left/Right clock (LRCLK)
;
; Send 16 bit words to the PIO for mono, 32 bit words for stereo. For mono,
; 32 bits are pulled and output, but this is two samples.
;
.program i2s_out
.side_set 2

                    ;        /--- LRCLK
                    ;        |/-- BCLK
bitloop1:           ;        ||
    out pins, 1       side 0b10
    jmp x-- bitloop1  side 0b11
    out pins, 1       side 0b00
    set x, 14         side 0b01

bitloop0:
    out pins, 1       side 0b00
    jmp x-- bitloop0  side 0b01
    out pins, 1       side 0b10
public entry_point:
    set x, 14         side 0b11


% c-sdk {

static inline void i2s_out_program_init(PIO pio, uint sm, uint offset, uint data_pin, uint clock_pin_base, float bit_rate) {
    pio_sm_config sm_config = i2s_out_program_get_default_config(offset);
    
    sm_config_set_out_pins(&sm_config, data_pin, 1);
    sm_config_set_sideset_pins(&sm_config, clock_pin_base);
    sm_config_set_out_shift(&sm_config, false, true, 32);
    sm_config_set_fifo_join(&sm_config, PIO_FIFO_JOIN_TX);  // Tx only so join ISR and OSR FIFOs together

    float div = clock_get_hz(clk_sys) / bit_rate;
    sm_config_set_clkdiv(&sm_config, div);
    pio_sm_init(pio, sm, offset, &sm_config);
    pio_sm_set_pins(pio, sm, 0); // clear pins
}

%}